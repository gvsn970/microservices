package com.nexiilabs.stp.prospect;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.springframework.stereotype.Repository;

import com.nexiilabs.stp.resource.EmployeeResponseDTO;
import com.nexiilabs.stp.user.UserResponseDTO;

@Transactional
@Repository
public class ProspectRepositoryImpl implements ProspectRepository {
	@PersistenceContext
	private EntityManager entityManager;

	@Override
	public UserResponseDTO addContact(ProspectModel prospectModel) {
		UserResponseDTO userResponseDTO = new UserResponseDTO();
		try {
			UserResponseDTO check = prospectExistencyCheck(prospectModel.getProspectName(),
					prospectModel.getFkCompanyId());
			if (check.getMessage().equals("Prospect Already Exists") && check.getStatusCode() == 2) {
				return check;
			} else {
				entityManager.persist(prospectModel);
				if (prospectModel.getProspectId() != 0) {
					userResponseDTO.setStatusCode(1);
					userResponseDTO.setMessage("Contact Added successfully.");
				} else {
					userResponseDTO.setStatusCode(0);
					userResponseDTO.setMessage("Contact Addition Failed.");
				}
			}
		} catch (Exception e) {
			userResponseDTO.setStatusCode(0);
			userResponseDTO.setMessage(e.getMessage());
		}
		return userResponseDTO;
	}

	private UserResponseDTO prospectExistencyCheck(String prospectName, int fkCompanyId) {
		UserResponseDTO userResponseDTO = new UserResponseDTO();
		try {
			String hql1 = "select * from stp_prospect sc where sc.prospect_name='" + prospectName
					+ "' and sc.fk_company_id=" + fkCompanyId + " and sc.delete_status=0";
			List prospectlist = entityManager.createNativeQuery(hql1).getResultList();
			System.out.println("Before existency check::" + prospectlist.size());
			if (prospectlist.size() > 0) {
				userResponseDTO.setStatusCode(2);
				userResponseDTO.setMessage("Prospect Already Exists");
			} else {
				userResponseDTO.setStatusCode(1);
				userResponseDTO.setMessage("Prospect Not Exists");
			}
		} catch (Exception e) {
			userResponseDTO.setStatusCode(0);
			userResponseDTO.setMessage(e.getMessage());
		}
		return userResponseDTO;
	}

	@Override
	public UserResponseDTO updateContact(ProspectUpdateModel prospectUpdateModel,ProspectModel prospectModel) {
		UserResponseDTO userResponseDTO = new UserResponseDTO();
		try {
			String hql = "update stp_prospect_followup set followup_status=1,updated_by="+prospectUpdateModel.getCreatedBy()+",updated_on=now() where fk_prospect_id="
					+ prospectUpdateModel.getFkProspectId();
			entityManager.createNativeQuery(hql).executeUpdate();
			entityManager.persist(prospectUpdateModel);
			if (prospectUpdateModel.getFollowUpId() != 0) {
				String hql1 = "update stp_prospect set prospect_name='"+prospectModel.getProspectName()+"',fk_company_id="+prospectModel.getFkCompanyId()+",email='"+prospectModel.getEmail()+"', prospect_status=1,updated_by="+prospectUpdateModel.getCreatedBy()+",updated_on=now() where prospect_id="
						+ prospectUpdateModel.getFkProspectId();
				entityManager.createNativeQuery(hql1).executeUpdate();
				if(prospectUpdateModel.getStageId()==7 ){
					String hql2="update stp_prospect set prospect_status=2,updated_by="+prospectUpdateModel.getCreatedBy()+",updated_on=now() where prospect_id=" + 
							prospectUpdateModel.getFkProspectId();
					entityManager.createNativeQuery(hql2).executeUpdate();
					String hql3="update stp_prospect_followup set followup_status=2,updated_by="+prospectUpdateModel.getCreatedBy()+",updated_on=now() where fk_prospect_id="
							+ prospectUpdateModel.getFkProspectId();
					entityManager.createNativeQuery(hql3).executeUpdate();
				}
				userResponseDTO.setStatusCode(1);
				userResponseDTO.setMessage("Prospect Updated successfully.");
			} else {
				userResponseDTO.setStatusCode(0);
				userResponseDTO.setMessage("Prospect Updation Failed.");
			}
		} catch (Exception e) {
			userResponseDTO.setStatusCode(0);
			userResponseDTO.setMessage(e.getMessage());
		}
		return userResponseDTO;
	}

	@Override
	public List<ProspectListResposeDTO> getProspectList(int userId) {
		ProspectListResposeDTO prospectListResposeDTO = null;
		List<ProspectListResposeDTO> list = new ArrayList<ProspectListResposeDTO>();
		try {
			String hql = "select sp.prospect_id,sp.prospect_name,sc.customer_name,sp.created_on,sp.email,sp.prospect_status,sp.fk_company_id "
					+ "from stp_prospect sp,stp_customer sc where sp.created_by in(SELECT user_id FROM stp_user WHERE reporting_hierarchy like '%,"+userId+",%' or reporting_hierarchy like '"+userId+",%' or reporting_hierarchy like '%,"+userId+"' or reporting_hierarchy like '"+userId+"' and delete_status=0) and "
					+ "sp.prospect_status!=2 and sp.fk_company_id=sc.customer_id and sp.delete_status=0";
			List<Object> prospectlist = entityManager.createNativeQuery(hql).getResultList();
			if (prospectlist.size() > 0) {
				Iterator itr = prospectlist.iterator();
				while (itr.hasNext()) {
					Object[] obj = (Object[]) itr.next();
					prospectListResposeDTO = new ProspectListResposeDTO();
					prospectListResposeDTO.setProspectId(Integer.parseInt(String.valueOf(obj[0])));
					prospectListResposeDTO.setProspectName(String.valueOf(obj[1]));
					prospectListResposeDTO.setCompanyName(String.valueOf(obj[2]));
					prospectListResposeDTO.setCreatedOn(String.valueOf(obj[3]));
					prospectListResposeDTO.setEmail(String.valueOf(obj[4]));
					prospectListResposeDTO.setProspectStatus(Integer.parseInt(String.valueOf(obj[5])));
					prospectListResposeDTO.setFkCompanyId(Integer.parseInt(String.valueOf(obj[6])));
					list.add(prospectListResposeDTO);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<FollowupProspectListResponseDTO> getAllFollowupList(int userId) {
		FollowupProspectListResponseDTO followupListResponseDTO = null;
		List<FollowupProspectListResponseDTO> list = new ArrayList<FollowupProspectListResponseDTO>();
		try {
			String hql = "select sf.followup_id,m.meeting_type,s.stage_name,sc.customer_name,sp.prospect_name,sf.contacted_on,sf.comments,sp.created_on,sp.email,sf.fk_prospect_id,sf.fk_meeting_id,sp.fk_company_id,sf.fk_stage_id,sf.next_followup \n"
					+ "from stp_prospect_followup sf,stp_prospect sp,stp_customer sc,stp_stage s,stp_meeting_type m where sf.fk_prospect_id= sp.prospect_id and sp.fk_company_id=sc.customer_id and"
					+ " sp.created_by in(SELECT user_id FROM stp_user WHERE reporting_hierarchy like '%,"+userId+",%' or reporting_hierarchy like '"+userId+",%' or reporting_hierarchy like '%,"+userId+"' or reporting_hierarchy like '"+userId+"' and delete_status=0) and\n"
					+ " sf.fk_stage_id=s.stage_id and sf.fk_meeting_id=m.meeting_type_id and sf.followup_status=0 and sf.delete_status=0";
			List<Object> followuplist = entityManager.createNativeQuery(hql).getResultList();
			if (followuplist.size() > 0) {
				Iterator itr = followuplist.iterator();
				while (itr.hasNext()) {
					Object[] obj = (Object[]) itr.next();
					followupListResponseDTO = new FollowupProspectListResponseDTO();
					followupListResponseDTO.setFollowupId(Integer.parseInt(String.valueOf(obj[0])));
					followupListResponseDTO.setMeetingType(String.valueOf(obj[1]));
					followupListResponseDTO.setStage(String.valueOf(obj[2]));
					followupListResponseDTO.setCompanyName(String.valueOf(obj[3]));
					followupListResponseDTO.setProspectName(String.valueOf(obj[4]));
					followupListResponseDTO.setContactedOn(String.valueOf(obj[5]));
					followupListResponseDTO.setComments(String.valueOf(obj[6]));
					followupListResponseDTO.setCreatedOn(String.valueOf(obj[7]));
					followupListResponseDTO.setEmail(String.valueOf(obj[8]));
					followupListResponseDTO.setFkProspectId(Integer.parseInt(String.valueOf(obj[9])));
					followupListResponseDTO.setFkmeetingId(Integer.parseInt(String.valueOf(obj[10])));
					followupListResponseDTO.setFkCompanyId(Integer.parseInt(String.valueOf(obj[11])));
					followupListResponseDTO.setFkStageId(Integer.parseInt(String.valueOf(obj[12])));
					followupListResponseDTO.setNextFollowup(String.valueOf(obj[13]));
					list.add(followupListResponseDTO);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<FollowupProspectListResponseDTO> getTodayFollowupList(int userId) {
		FollowupProspectListResponseDTO followupListResponseDTO = null;
		List<FollowupProspectListResponseDTO> list = new ArrayList<FollowupProspectListResponseDTO>();
		try {
			String hql = "select sf.followup_id,m.meeting_type,s.stage_name,sc.customer_name,sp.prospect_name,sf.contacted_on,sf.comments,sp.created_on,sp.email,sf.fk_prospect_id,sf.fk_meeting_id,sp.fk_company_id,sf.fk_stage_id,sf.next_followup \n"
					+ "from stp_prospect_followup sf,stp_prospect sp,stp_customer sc,stp_stage s,stp_meeting_type m where sf.fk_prospect_id= sp.prospect_id and sp.fk_company_id=sc.customer_id and"
					+ " sp.created_by in(SELECT user_id FROM stp_user WHERE reporting_hierarchy like '%,"+userId+",%' or reporting_hierarchy like '"+userId+",%' or reporting_hierarchy like '%,"+userId+"' or reporting_hierarchy like '"+userId+"' and delete_status=0) and "
					+ " sf.fk_stage_id=s.stage_id and sf.fk_meeting_id=m.meeting_type_id and sf.followup_status=0 and sf.next_followup<=now() and sf.delete_status=0";
			List<Object> followuplist = entityManager.createNativeQuery(hql).getResultList();
			if (followuplist.size() > 0) {
				Iterator itr = followuplist.iterator();
				while (itr.hasNext()) {
					Object[] obj = (Object[]) itr.next();
					followupListResponseDTO = new FollowupProspectListResponseDTO();
					followupListResponseDTO.setFollowupId(Integer.parseInt(String.valueOf(obj[0])));
					followupListResponseDTO.setMeetingType(String.valueOf(obj[1]));
					followupListResponseDTO.setStage(String.valueOf(obj[2]));
					followupListResponseDTO.setCompanyName(String.valueOf(obj[3]));
					followupListResponseDTO.setProspectName(String.valueOf(obj[4]));
					followupListResponseDTO.setContactedOn(String.valueOf(obj[5]));
					followupListResponseDTO.setComments(String.valueOf(obj[6]));
					followupListResponseDTO.setCreatedOn(String.valueOf(obj[7]));
					followupListResponseDTO.setEmail(String.valueOf(obj[8]));
					followupListResponseDTO.setFkProspectId(Integer.parseInt(String.valueOf(obj[9])));
					followupListResponseDTO.setFkmeetingId(Integer.parseInt(String.valueOf(obj[10])));
					followupListResponseDTO.setFkCompanyId(Integer.parseInt(String.valueOf(obj[11])));
					followupListResponseDTO.setFkStageId(Integer.parseInt(String.valueOf(obj[12])));
					followupListResponseDTO.setNextFollowup(String.valueOf(obj[13]));
					list.add(followupListResponseDTO);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<MeetingType> getMeetingTypesList() {
		MeetingType meetingType = null;
		List<MeetingType> list = new ArrayList<MeetingType>();
		try {
			String hql = "select * from stp_meeting_type";
			List<Object> meetingTypeList = entityManager.createNativeQuery(hql).getResultList();
			if (meetingTypeList.size() > 0) {
				Iterator itr = meetingTypeList.iterator();
				while (itr.hasNext()) {
					Object[] obj = (Object[]) itr.next();
					meetingType = new MeetingType();
					meetingType.setMeetingTypeId(Integer.parseInt(String.valueOf(obj[0])));
					meetingType.setMeetingType(String.valueOf(obj[1]));
					list.add(meetingType);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	@Override
	public List<StageModel> getStageList() {
		StageModel stageModel = null;
		List<StageModel> list = new ArrayList<StageModel>();
		try {
			String hql = "select * from stp_stage";
			List<Object> stageList = entityManager.createNativeQuery(hql).getResultList();
			if (stageList.size() > 0) {
				Iterator itr = stageList.iterator();
				while (itr.hasNext()) {
					Object[] obj = (Object[]) itr.next();
					stageModel = new StageModel();
					stageModel.setStageId(Integer.parseInt(String.valueOf(obj[0])));
					stageModel.setStageName(String.valueOf(obj[1]));
					list.add(stageModel);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
	@Override
	public UserResponseDTO deleteProspect(ProspectModel prospectModel) {
		UserResponseDTO userResponseDTO = new UserResponseDTO();
		try {
			String hql1 = "update stp_prospect set delete_status=1,deleted_by=" + prospectModel.getDeletedBy()
					+ ",deleted_on=now() where prospect_id=" + prospectModel.getProspectId();
			int prospectDelete=entityManager.createNativeQuery(hql1).executeUpdate();
			if(prospectDelete>0){
			String hql2 = "update stp_prospect_followup set delete_status=1,deleted_by=" + prospectModel.getDeletedBy()
					+ ",deleted_on=now() where fk_prospect_id=" + prospectModel.getProspectId();
			entityManager.createNativeQuery(hql2).executeUpdate();
			userResponseDTO.setStatusCode(1);
			userResponseDTO.setMessage("Prospect Deleted successfully");
			}
			else{
				userResponseDTO.setStatusCode(0);
				userResponseDTO.setMessage("Prospect Deletion Failed");
			}
			
		} catch (Exception e) {
			userResponseDTO.setStatusCode(0);
			userResponseDTO.setMessage(e.getMessage());
		}
		return userResponseDTO;
	}

	@Override
	public FollowupProspectListResponseDTO getProspectDetails(Integer prospectId) {
		FollowupProspectListResponseDTO followupListResponseDTO = null;
		List<Object> prospectDetails=null;
		try {
			String hql = "select sf.followup_id,m.meeting_type,s.stage_name,sc.customer_name,sp.prospect_name,sf.contacted_on,sf.comments,sp.created_on,sp.email,sf.fk_prospect_id,sf.fk_meeting_id,sp.fk_company_id,sf.fk_stage_id,sf.next_followup from stp_prospect_followup sf,stp_prospect sp,stp_customer sc,stp_stage s,stp_meeting_type m where sf.fk_prospect_id= sp.prospect_id"
					+ " and sf.fk_prospect_id="+prospectId+" and sp.fk_company_id=sc.customer_id and "
					+ "sf.fk_stage_id=s.stage_id and sf.fk_meeting_id=m.meeting_type_id and "
					+ "sf.followup_status=0 and sf.delete_status=0";
			 prospectDetails = entityManager.createNativeQuery(hql).getResultList();
			if (prospectDetails.size() > 0) {
				Iterator itr = prospectDetails.iterator();
				while (itr.hasNext()) {
					Object[] obj = (Object[]) itr.next();
					followupListResponseDTO = new FollowupProspectListResponseDTO();
					followupListResponseDTO.setFollowupId(Integer.parseInt(String.valueOf(obj[0])));
					followupListResponseDTO.setMeetingType(String.valueOf(obj[1]));
					followupListResponseDTO.setStage(String.valueOf(obj[2]));
					followupListResponseDTO.setCompanyName(String.valueOf(obj[3]));
					followupListResponseDTO.setProspectName(String.valueOf(obj[4]));
					followupListResponseDTO.setContactedOn(String.valueOf(obj[5]));
					followupListResponseDTO.setComments(String.valueOf(obj[6]));
					followupListResponseDTO.setCreatedOn(String.valueOf(obj[7]));
					followupListResponseDTO.setEmail(String.valueOf(obj[8]));
					followupListResponseDTO.setFkProspectId(Integer.parseInt(String.valueOf(obj[9])));
					followupListResponseDTO.setFkmeetingId(Integer.parseInt(String.valueOf(obj[10])));
					followupListResponseDTO.setFkCompanyId(Integer.parseInt(String.valueOf(obj[11])));
					followupListResponseDTO.setFkStageId(Integer.parseInt(String.valueOf(obj[12])));
					followupListResponseDTO.setNextFollowup(String.valueOf(obj[13]));				}
			}else{
				String hql1 = "select sp.prospect_id,sp.prospect_name,sc.customer_name,sp.created_on,sp.email,sp.prospect_status \n" + 
						"from stp_prospect sp,stp_customer sc where sp.prospect_status!=2 and sp.fk_company_id=sc.customer_id\n" + 
						"and sp.delete_status=0 and sp.prospect_id="+prospectId;
				prospectDetails = entityManager.createNativeQuery(hql1).getResultList();
				if (prospectDetails.size() > 0) {
					Iterator itr = prospectDetails.iterator();
					while (itr.hasNext()) {
						Object[] obj = (Object[]) itr.next();
						followupListResponseDTO = new FollowupProspectListResponseDTO();
						followupListResponseDTO.setFkProspectId(Integer.parseInt(String.valueOf(obj[0])));
						followupListResponseDTO.setProspectName(String.valueOf(obj[1]));
						followupListResponseDTO.setCompanyName(String.valueOf(obj[2]));
						followupListResponseDTO.setCreatedOn(String.valueOf(obj[3]));
						followupListResponseDTO.setEmail(String.valueOf(obj[4]));
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return followupListResponseDTO;
	}
}
